version: 2

defaults: &defaults
  # The "on" switch. This is the key requirement for making the editor/LSP client turn on
  # these features.
  root_markers: ["inbox.md"]

configs:
  inbox:
    <<: *defaults
    lsp_feature: workspace_edit
    # Period is optional. If it is set then Super Glass calls it every `period` amount of time.
    period: 5
    command: |
      width=20
      json="$(himalaya --output json list)"
      count="$(echo $json | jq length)"
      head1="    Subject          |        From          | View  |Archive|Delete "
      head2="---------------------|----------------------|-------|-------|-------"
      output="$head1\n$head2"
      for i in `seq 0 "$((count - 1))"`
      do
        subject=$(echo "$json" | jq --raw-output ".[$i].subject" | head -c $width)
        sender=$(echo "$json" | jq --raw-output ".[$i].sender" | head -c $width)
        buttons="   📖  |   📥  |  ❌  "
        line="$(printf '%-'$width's' "$subject") | $(printf '%-'$width's' "$sender") |$buttons"
        output="$output\n$line"
      done
      echo "TextDocumentEdit {workspace_root}/inbox.md 0:0,-1:-1"
      echo "# Inbox\n"
      echo "$output"
    parsing:
      formats:
        # `kind`: TextDocumentEdit | CreateFile | RenameFile | DeleteFile
        # `uri`: Text document URI
        # Settting end_line and end_char each to `-1` signifies replacing the whole document
        # `range` (only for TextDocumentEdit): start_line,start_char:end_line,end_char
        # `text_edit`: All remaining lines
        # TODO: perhaps this could be made a default formatter?
        - "{kind} {uri} {start_line}:{start_char},{end_line}:{end_char}\n{text_edit}"
        - "{kind} {uri} {new_name}"
        - "{kind} {uri}"

  inbox_buttons:
    <<: *defaults
    lsp_feature: goto_definition
    command:
      # Here's a good candidate for "work progress start" notification
      - |
        id=$(cat {file} | get line from {range} | grep [:num:]) # pseudo code!
        button=$(cat {file} | get button from {range} | grep '[*]') # pseudo code!
        if [[ button == reply]]; then
          echo "call email_client/send_email $id"
        fi
        if [[ button == reply]]; then
          echo "call email_client/reply_email $id"
        fi
        if [[ button == read]]; then
          echo "call email_client/read_email $id"
        fi
        if [[ button == archive]]; then
          echo "call email_client/archive_email $id"
        fi
      # Here's a good candidate for "work progress end" notification

      # Also a notification to say that whatever just happened was successful

      # TODO: create new token {previous exit code}

      - |
        if [ {previous_exit_code} != 0 ]; then
          exit 1
        fi
        id=$(cat {file} | get line from {range} | grep [:num:]) # pseudo code!
        button=$(cat {file} | get button from {range} | grep '[*]') # pseudo code!
        if [[ button == reply]]; then
          echo "drafts/$id.mime 0:0,0:0"
        fi
        if [[ button == read]]; then
          echo "$id.mime 0:0,0:0"
        fi
        if [[ button == archive]]; then
          echo "inbox.md 0:0,0:0"
        fi
    parsing:
      formats:
        - "{uri} {range}" # that's the default so not necessarily needed

  # We'd know it was a new email by the name of the file? Eg; new.mime? Or put them in drafts folder?
  new_email:
    <<: *defaults
    lsp_feature: workspace_edit
    # `callable` allows this config to be called by either a LSP `workspace/executeCommand` request from
    # the client or this LSP server itself using the `call <command> <args>` convention. Typically you
    # can offer the user this command in a code action. The command name is derived from the Super Glass
    # app name amd YAML config ID. So `himalaya/read_email` in this case.
    callable:
      name: "himalaya/new_email" # that's the default anyway, so not really needed
    command: |
      text="$(himalaya read {id})"
      echo "TextDocumentEdit {workspace_root}/new.mime 0:0,0:0"
      echo "
      Actions: [Send]

      From: Some One <someone@example.com>
      MIME-Version: 1.0
      Content-Type: multipart/mixed; boundary='XXXXboundary text'

      This is a multipart message in MIME format.

      --XXXXboundary text
      Content-Type: text/plain

      this is the body text

      --XXXXboundary text
      "

  reply_email:
    <<: *defaults
    lsp_feature: workspace_edit
    callable:
      name: "himalaya/reply_email"
      args: "{id}"
    command: |
      # Create new email (shared code with new_email?) using quoted (>) body of existing email
      # I think the reply body could be copied from the file, rather than re-downloading it?
      # `cat inbox/{id}.mime > drafts/{id}.md | tee prepend >`
      echo "TextDocumentEdit {workspace_root}/{id}.md 0:0,0:0"
      echo "$text"

  read_email:
    <<: *defaults
    lsp_feature: workspace_edit
    callable:
      name: "himalaya/read_email"
      args: "{id}"
    command: |
      text="$(himalaya read {id})"
      echo "TextDocumentEdit {workspace_root}/{id}.md 0:0,0:0"
      echo "$text"

  archive_email:
    <<: *defaults
    lsp_feature: workspace_edit
    callable:
      args: "{id}"
    command: |
      himalaya move {id} Archive
      echo "DocumentDelete {workspace_root}/{id}.md" # TODO: or maybe just close it?
    parsing:
      formats:
        - "{kind} {uri}"

  send_email:
    <<: *defaults
    lsp_feature: workspace_edit
    callable:
      args: "{id}"
    command: |
      destination=$(cat {file} | extract destination from header)
      cat {file} | himalaya send "$destination" # maybe himalaya aleady extracts destination from header?
      echo "DocumentDelete {workspace_root}/{id}.md" # TODO: or maybe just close it?
    parsing:
      formats:
        - "{kind} {uri}"


# Potential inbox.md
#
# Actions: [Reply] [Archive]
#
# MIME-Version: 1.0
# Content-Type: multipart/mixed; boundary=frontier
#
# This is a message with multiple parts in MIME format.
# --frontier
# Content-Type: text/plain
#
# This is the body of the message.
# --frontier
# Content-Type: application/octet-stream
# Content-Transfer-Encoding: base64
#
# PGh0bWw+CiAgPGhlYWQ+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPHA+VGhpcyBpcyB0aGUg
# Ym9keSBvZiB0aGUgbWVzc2FnZS48L3A+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==
# --frontier--
#

# Code Action design:
#   inbox_actions:
#     <<: *defaults
#     lsp_feature: code_actions
#     # `file`
#     # `range`
#     # `context`
#     # https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#codeActionParams
#     command: |
#       id=$(cat {file} | get line from {range} | grep [:num:]) # pseudo code!
#       # If server can't send unsolicited `Location`, then maybe make a "button" to trigger the opening of the
#       # new email?
#       echo "New himalaya/new_email"
#       if [[ $id ]]; then
#         echo "Read himalaya/read_email $id"
#         echo "Archive himalaya/archive_email $id"
#       fi
#     parsing:
#       formats:
#         - "{title} {command} {args}" # that's the default so not necessarily needed
